name: PR-$(System.PullRequest.PullRequestNumber)-$(Date:yyyyMMdd)$(Rev:.rr)
trigger:
  # Batch merge builds together while a merge build is running
  batch: true
  branches:
    include:
    - master
    - Fix*
  paths:
    include:
    - '*'
    exclude:
    - /tools/releaseBuild/**/*
    - /.vsts-ci/misc-analysis.yml
pr:
  branches:
    include:
    - master
    - release*
  paths:
    include:
    - '*'
    exclude:
    - /tools/releaseBuild/**/*
    - /.vsts-ci/misc-analysis.yml
variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  # Avoid expensive initialization of dotnet cli, see: http://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

resources:
- repo: self
  clean: true
jobs:
- job: Linux_CI

  pool:
    name: Hosted Ubuntu 1604

  timeoutInMinutes: 120

  steps:
  - powershell: |
      Get-Process
    displayName: Capture Processes
    condition: succeededOrFailed()

  - powershell: |
      Get-ChildItem -Path env:
    displayName: Capture environment
    condition: succeededOrFailed()

  - script: netstat -tulpn
    displayName: Get open ports

  - powershell: |
      # sometimes the file is locked and we must wait or things will fail
      $filePath = '/var/lib/dpkg/lock'
      $lockList = sudo lsof '/var/lib/dpkg/lock'
      while($lockList)
      {
        Write-Verbose "waiting..." -verbose
        Write-Verbose ($lockList -join "`n") -verbose
        Start-Sleep -Second 30
        $lockList = sudo lsof $filePath
      }
      exit 0
    displayName: Wait for /var/lib/dpkg/lock
    condition: succeededOrFailed()

  - powershell:  Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhmmss"))"
    displayName: Set Build Name for Non-PR
    condition: ne(variables['Build.Reason'], 'PullRequest')

# Several scripts require TMPDIR to exist
# Set it to AGENT_TEMPDIRECTORY so that we know it exists
  - powershell: |
      Write-Host "##vso[task.setvariable variable=TEMP]$env:AGENT_TEMPDIRECTORY"
    displayName: Set TEMP to AGENT_TEMPDIRECTORY
    condition: succeededOrFailed()

  - template: /tools/releaseBuild/azureDevOps/templates/insert-nuget-config-azfeed.yml

  - powershell: |
      Import-Module ./tools/ci.psm1
      Invoke-Bootstrap-Stage
    displayName: Bootstrap
    condition: succeeded()

  - powershell: |
      Import-Module ./tools/ci.psm1
      $env:NugetKey = '$(NUGET_KEY)'
      Invoke-LinuxTests
    displayName: Build and Test
    condition: succeeded()

  # Uploads any packages as an artifact
  - powershell: |
      Get-ChildItem -Path ${env:BUILD_ARTIFACTSTAGINGDIRECTORY} -Include *.nupkg, *.rpm, *.deb, *.tar.gz, TestPackage.zip -Recurse | Select-Object -ExpandProperty FullName | ForEach-Object {
        Write-Host "##vso[artifact.upload containerfolder=artifacts;artifactname=artifacts]$_"
      }
    displayName: Publish Artifacts
    condition: succeededOrFailed()
    continueOnError: true

- job: macOS_CI

  pool:
    name: Hosted macOS

  timeoutInMinutes: 120

  steps:
  - powershell: |
      Get-ChildItem -Path env:
    displayName: Capture environment
    condition: succeededOrFailed()

  - script: lsof -iTCP -sTCP:LISTEN -n -P
    displayName: Get open ports

  - powershell:  Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhmmss"))"
    displayName: Set Build Name for Non-PR
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - template: /tools/releaseBuild/azureDevOps/templates/insert-nuget-config-azfeed.yml

  - powershell: |
      Import-Module ./tools/ci.psm1
      Invoke-Bootstrap-Stage
    displayName: Bootstrap
    condition: succeeded()
  - powershell: |
      Import-Module ./tools/ci.psm1
      $env:NugetKey = '$(NUGET_KEY)'
      Invoke-LinuxTests
    displayName: Build and Test
    condition: succeeded()
  # Uploads any packages as an artifact
  - powershell: |
      Get-ChildItem -Path ${env:BUILD_ARTIFACTSTAGINGDIRECTORY} -Include *.nupkg, *.pkg, *.tar.gz, TestPackage.zip -Recurse | Select-Object -ExpandProperty FullName | ForEach-Object {
        Write-Host "##vso[artifact.upload containerfolder=artifacts;artifactname=artifacts]$_"
      }
    displayName: Publish Artifacts
    condition: succeededOrFailed()
    continueOnError: true

queue:
  name: Hosted VS2017
  parallel: 2 # Limit to two agents at a time
  matrix:
    UnelevatedPesterTests:
      Purpose: UnelevatedPesterTests
    ElevatedPesterTests_xUnit_Packaging:
      Purpose: ElevatedPesterTests_xUnit_Packaging
  timeoutInMinutes: 120

variables:
  GIT_CONFIG_PARAMETERS: "'core.autocrlf=false'"
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  # Avoid expensive initialization of dotnet cli, see: https://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

resources:
- repo: self
  clean: true

steps:
  - powershell: |
      Get-ChildItem -Path env:
    displayName: Capture environment
    condition: succeededOrFailed()
  - powershell:  Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhmmss"))"
    displayName: Set Build Name for Non-PR
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - template: /tools/releaseBuild/azureDevOps/templates/insert-nuget-config-azfeed.yml

  - powershell: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
      Import-Module .\tools\ci.psm1
      Invoke-AppveyorInstall
    displayName: Bootstrap
    condition: succeededOrFailed()
  - powershell: |
      Import-Module .\tools\ci.psm1
      Invoke-AppveyorBuild
      Save-PSOptions
    displayName: Build
    condition: succeeded()
  - powershell: |
      Import-Module .\tools\ci.psm1
      Restore-PSOptions
      Invoke-AppveyorTest -Purpose '$(Purpose)'
    displayName: Test
    condition: succeeded()
  - powershell: |
      Import-Module .\tools\ci.psm1
      Restore-PSOptions
      Invoke-AppveyorAfterTest
    displayName: AfterTest
    condition: succeededOrFailed()
  - powershell: |
      Import-Module .\tools\ci.psm1
      Restore-PSOptions
      Invoke-AppveyorFinish -NuGetKey $(NUGET_KEY)
    displayName: Finish
    condition: eq(variables['Purpose'], 'ElevatedPesterTests_xUnit_Packaging')
